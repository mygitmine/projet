/* tcpserver.c */

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>

int write_client(char *data){
    FILE* passwd_file = fopen("passwd", "a");
    if(passwd_file==NULL)
    {
        printf("error : cannot open passwd file !!!");
        return -1;
    }

    if(passwd_file!=NULL)
    { 
        fputs(data, passwd_file);
        fputs("\n",passwd_file);
    }
    fclose(passwd_file);

    return 1;
}

int auth_ok(char *login, char *passwd){
    char line[2049], *login_tmp=NULL , *passwd_tmp=NULL, *index_delim =
        NULL, c='\0', delim = ':';
    int i = 0;
    FILE* passwd_file = fopen("passwd", "r");
    if(passwd_file==NULL)
    {
        printf("error : cannot open passwd file !!!");
        return -1;
    }
    printf("Checking authentication...\n");
    printf("Login/pass : [%s/%s]\n", login, passwd);

    while((c=fgetc(passwd_file)) != EOF){


        if(c == '\n' || i == 2049) {
            line[i] = '\0';
            //printf("\nLigne : [%s]\n", line);
            i=0;
            index_delim = strchr(line,delim);
            if(index_delim == NULL)
                continue;

            *index_delim='\0';
            login_tmp=line;
            passwd_tmp=index_delim+1;
           // printf("Login/pass tmp : [%s/%s]\n", login_tmp, passwd_tmp);

            if(strncmp(login_tmp,login,1024) == 0 && strncmp(passwd_tmp, passwd,
                        1024) == 0) {
                printf("Match !\n");
                fclose(passwd_file);
                return 1;
            }
        }
        else {
           // printf("[%c]",c);
            line[i] = c;
            i++;
        }
    }

    fclose(passwd_file);
    return 0;
}

int main()
{
    int sock, connected, bytes_recieved , bool_un = 1, i = 0;  
    char recv_data[1024],login[1024],mdp[1024];       
    struct sockaddr_in server_addr,client_addr;    
    unsigned int sin_size;

    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        perror("Socket");
        exit(1);
    }

    if (setsockopt(sock,SOL_SOCKET,SO_REUSEADDR,&bool_un,sizeof(int)) == -1) {
        perror("Setsockopt");
        exit(1);
    }

    server_addr.sin_family = AF_INET;         
    server_addr.sin_port = htons(5000);     
    server_addr.sin_addr.s_addr = INADDR_ANY; 
    bzero(&(server_addr.sin_zero),8); 

    if (bind(sock, (struct sockaddr *)&server_addr, sizeof(struct sockaddr))== -1) {
        perror("Unable to bind");
        exit(1);
    }

    if (listen(sock, 5) == -1) {
        perror("Listen");
        exit(1);
    }

    printf("\nTCPServer Waiting for client ");
    fflush(stdout);


    while(1)
    {  
        sin_size = sizeof(struct sockaddr_in);

        printf("\nWaiting for clients...\n");
        connected = accept(sock, (struct sockaddr *)&client_addr,&sin_size);
        if(connected == -1) {
            perror("[ERROR] in accept");
            close(connected);
            break;
        }

        printf("I got a connection from (%s , %d)\n", inet_ntoa(client_addr.sin_addr),ntohs(client_addr.sin_port));
        printf("phase d'authentification : \n");  
        bytes_recieved = recv(connected,recv_data,1,0);
        recv_data[bytes_recieved] = '\0';
        i=0;
        printf("Client enregistré : [%s], [%i]\n", recv_data, bytes_recieved);

        if(strstr(recv_data,"o")!=NULL)
        {  
            bytes_recieved = recv(connected,recv_data,1024,0);
            recv_data[bytes_recieved] = '\0';
            while(recv_data[i] != '\0' && i < 1024) {
                login[i]=recv_data[i];
                i++;
            } 
            if( i == 1024 ) {
                perror("[ERROR] Login too long\n");
                close(connected);
                continue;
            }
            else {
                login[i] = '\0';
            }

            printf("Login : [%s]\n", login);

            bytes_recieved = recv(connected,recv_data,1024,0);
            recv_data[bytes_recieved] = '\0';

            i=0;
            while(recv_data[i] != '\0' && i < 1024) {
                mdp[i]=recv_data[i];
                i++;
            } 
            if( i == 1024 ) {
                perror("[ERROR] Password too long\n");
                close(connected);
                continue;
            }
            else {
                mdp[i] = '\0';
            }

            printf("Password : [%s]\n", mdp);

            if(auth_ok(login,mdp)==1)
                printf("vous êtes bien inscrit");
            else {
                close(connected);
                continue;
            }
        }
        else if(strstr(recv_data,"n")!=NULL)
        { 
            bytes_recieved = recv(connected,recv_data,1024,0);
            recv_data[bytes_recieved] = '\0';
            write_client(recv_data);
        }
        close(connected);

    } 
    return 0;
}
